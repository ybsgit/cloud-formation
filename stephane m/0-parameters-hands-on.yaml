Parameters:
  SecurityGroupDescription:
    Type: String
    Default: "Enter SecurityGroupDescription"

  SecurityGroupPort:
    Type: Number
    MinValue: 1
    MaxValue: 64000
  
  DBPwd:
    Type: String
    MinLength: 8
    NoEcho: true
    Description: "Enter Database password"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  SecurityGroupIngressCIDR:
    Type: String
    Description: Enter CIDR block allowed to communicate with EC2
    MinLength: '4'
    MaxLength: '25'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  MyVPC:
    Type: AWS::EC2::VPC::Id

  MySubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>
  
  DbSubnetIpBlocks:
    Type: CommaDelimitedList
    Default: "10.0.48.0/24, 10.0.112.0/24, 10.0.176.0/24"

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.

Resources:
  Ec2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-02e136e904f3da870
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SubnetId: !Ref DBSubnet1
      SecurityGroupIds: 
        - !GetAtt MySecurityGroup.GroupId

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: !Ref SecurityGroupPort
        ToPort: !Ref SecurityGroupPort
        CidrIp: !Ref SecurityGroupIngressCIDR
      VpcId: !Ref MyVPC

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Select [0, !Ref DbSubnetIpBlocks]
      VpcId: !Ref MyVPC

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Select [1, !Ref DbSubnetIpBlocks]
      VpcId: !Ref MyVPC

  DBSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Select [2, !Ref DbSubnetIpBlocks]
      VpcId: !Ref MyVPC